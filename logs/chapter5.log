Welcome to Scala version 2.8.1.final (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_24).
Type in expressions to have them evaluated.
Type :help for more information.

scala> val hex = 0x5
hex: Int = 5

scala> val hex2 = 0x00FF
hex2: Int = 255

scala> val magic = 0xcafebabe
magic: Int = -889275714

scala> val oct = 035
oct: Int = 29

scala> val nov = 0777
nov: Int = 511

scala> val dec = 0321
dec: Int = 209

scala> val dec1 = 31
dec1: Int = 31

scala> val dec2 = 255
dec2: Int = 255

scala> val dec3 = 200000000000000000000000000000000000000000
<console>:1: error: integer number too large
       val dec3 = 200000000000000000000000000000000000000000
                  ^

scala> val dec3 = 200000000000000000000000000000000000000000L
<console>:1: error: integer number too large
       val dec3 = 200000000000000000000000000000000000000000L
                  ^

scala> val dec3 = 200000000000000000000000
<console>:1: error: integer number too large
       val dec3 = 200000000000000000000000
                  ^

scala> val dec3 = 200000000000000000000000L
<console>:1: error: integer number too large
       val dec3 = 200000000000000000000000L
                  ^

scala> val dec3 = 200000000000000000000L
<console>:1: error: integer number too large
       val dec3 = 200000000000000000000L
                  ^

scala> val dec3 = 20000000000000000L
dec3: Long = 20000000000000000

scala> val dec3 = 200000000000000000L
dec3: Long = 200000000000000000

scala> val dec3 = 2000000000000000000L
dec3: Long = 2000000000000000000

scala> val dec3 = 20000000000000000000L
<console>:1: error: integer number too large
       val dec3 = 20000000000000000000L
                  ^

scala> val dec3 = 2000000000000000000L
dec3: Long = 2000000000000000000

scala> val dec3 = 2000000000000000000
<console>:1: error: integer number too large
       val dec3 = 2000000000000000000
                  ^

scala> val prog = 0xCAFEBABEL
prog: Long = 3405691582

scala> val tower = 35L
tower: Long = 35

scala> val of = 311
of: Int = 311

scala> val little: Short = 367
little: Short = 367

scala> val littler: Byte = 38
littler: Byte = 38

scala> val big = 1.2345
big: Double = 1.2345

scala> val bigger = 1.2345e1
bigger: Double = 12.345

scala> val biggerStill = 123E45
biggerStill: Double = 1.23E47

scala> val little = 1.2345F
little: Float = 1.2345

scala> val littleBigger = 3e5f
littleBigger: Float = 300000.0

scala> val anotherDouble = 3e5
anotherDouble: Double = 300000.0

scala> val yetAnother = 3e5D
yetAnother: Double = 300000.0

scala> val a = 'A'
a: Char = A

scala> val c = '\101'
c: Char = A

scala> val d = '\u0041'
d: Char = A

scala> val f = '\u0044'
f: Char = D

scala> val B\u0041\0044 = 1
<console>:5: error: not found: value \
       val B\u0041\0044 = 1
                  ^

scala> val B\u0041\u0044 = 1
BAD: Int = 1

scala> val backslash = '\\'
backslash: Char = \

scala> val hello = "hello"
hello: java.lang.String = hello

scala> val escapes = '\\\"\'"
<console>:1: error: unclosed character literal
       val escapes = '\\\"\'"
                     ^

scala> val escapes = "\\\"\'"
escapes: java.lang.String = \"'

scala> println("""Welcome to Ultamix 3000.
     |            Type "HELP" for help.""")
Welcome to Ultamix 3000.
           Type "HELP" for help.

scala> println("""|Welcome to Ultamix 3000.
     |            |Type "HELP" for help.""".stripMargin)
Welcome to Ultamix 3000.
Type "HELP" for help.

scala> def updateRecordByName(r: Symbol, value: Any) {
     |   // code goes here
     | }
updateRecordByName: (r: Symbol,value: Any)Unit

scala> updateRecordByName(favoriteAlbum, "OK Computer")
<console>:7: error: not found: value favoriteAlbum
       updateRecordByName(favoriteAlbum, "OK Computer")
                          ^

scala> updateRecordByName('favoriteAlbum, "OK Computer")

scala> val s = 'aSymbol
s: Symbol = 'aSymbol

scala> s.name
res4: String = aSymbol

scala> val bool = true
bool: Boolean = true

scala> val fool = false
fool: Boolean = false

scala> val sum = 1 + 2
sum: Int = 3

scala> val sumMore = (1).+(2)
sumMore: Int = 3

scala> val longSum = 1 + 2L
longSum: Long = 3

scala> val s = "Hello, world!"
s: java.lang.String = Hello, world!

scala> s indexOf 'o'
res5: Int = 4

scala> s indexOf('0', 5)
res6: Int = -1

scala> s indexOf('o', 5)
res7: Int = 8

scala> -2.0
res8: Double = -2.0

scala> (2.0).unary_-
res9: Double = -2.0

scala> val s = "Hello, world!"
s: java.lang.String = Hello, world!

scala> s.toLowerCase
res10: java.lang.String = hello, world!

scala> s toLowerCase
res11: java.lang.String = hello, world!

scala> 1.2 + 2.3
res12: Double = 3.5

scala> 3 - 1
res13: Int = 2

scala> 'b' - 'a'
res14: Int = 1

scala> 2L * 3L
res15: Long = 6

scala> 11 / 4
res16: Int = 2

scala> 11 % 4
res17: Int = 3

scala> 11.0f / 4.0f
res18: Float = 2.75

scala> 11.0 % 4.0f
res19: Double = 3.0

scala> math.IEEEremainder(11.0, 4.0)
res20: Double = -1.0

scala> val nef = 1 + -3
nef: Int = -2

scala> val y = +3
y: Int = 3

scala> -neg
<console>:6: error: not found: value neg
       -neg
        ^

scala> val neg = 1 + -3
neg: Int = -2

scala> -neg
res22: Int = 2

scala> 1 > 2
res23: Boolean = false

scala> 1 < 2
res24: Boolean = true

scala> 1.0 <= 1.0
res25: Boolean = true

scala> 3.5f >= 3.6f
res26: Boolean = false

scala> 'a' >= 'A'
res27: Boolean = true

scala> val thisIsBoring = !true
thisIsBoring: Boolean = false

scala> !thisIsBoring
res28: Boolean = true

scala> val toBe = true
toBe: Boolean = true

scala> val question = toBe || !toBe
question: Boolean = true

scala> val paradox = toBe & !toBe
paradox: Boolean = false

scala> def salt() = { println("salt"; false }
<console>:1: error: ')' expected but ';' found.
       def salt() = { println("salt"; false }
                                    ^

scala> def salt() = { println("salt"); false }
salt: ()Boolean

scala> def pepper() = { println("pepper"); true }
pepper: ()Boolean

scala> pepper() && salt()
pepper
salt
res29: Boolean = false

scala> salt() && pepper()
salt
res30: Boolean = false

scala> 1 & 2
res31: Int = 0

scala> 1 | 2
res32: Int = 3

scala> 1 ^ 3
res33: Int = 2

scala> ~1
res34: Int = -2

scala> -1 >> 31
res35: Int = -1

scala> -1 >>> 31
res36: Int = 1

scala> 1 << 2
res37: Int = 4

scala> 1 == 2
res38: Boolean = false

scala> 1 != 2
res39: Boolean = true

scala> 2 == 2
res40: Boolean = true

scala> List(1, 2, 3) == List(1, 2, 3)
res41: Boolean = true

scala> List(1, 2, 3) == List(4, 5, 6)
res42: Boolean = false

scala> 1 == 1.0
res43: Boolean = true

scala> List(1, 2, 3) == "hello"
res44: Boolean = false

scala> List(1, 2, 3) == null
res45: Boolean = false

scala> null == List(1, 2, 3)
res46: Boolean = false

scala> ("he"+"llo") == "hello"
res47: Boolean = true

scala> (2 +2) * 7
res48: Int = 28

scala> 2 + 2 * 17
res49: Int = 36

scala> 2 + 2 * 7
res50: Int = 16

scala> 2 << 2 + 2
res51: Int = 32

scala> 2 + 2 << 2
res52: Int = 16
